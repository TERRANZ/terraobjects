package ru.terraobjects.entity.dao;

/**
 *
 * @author terranz
 */
import java.sql.SQLException;
import java.util.List;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.sf.persist.*;
import ru.terraobjects.entity.TOObject;
import ru.terraobjects.entity.TOObjectProperty;
import ru.terraobjects.entity.TOProperty;
import ru.terraobjects.entity.TOPropertyType;

public class TOObjectsManager
{

    private Connection conn = null;
    private Persist persist = null;

    public TOObjectsManager(Connection conn)
    {
	this.conn = conn;
	persist = new Persist(conn);
	persist.setUpdateAutoGeneratedKeys(true);
    }

    public List getAllObjects()
    {
	return persist.readList(TOObject.class, DAOConsts.SELECT_ALL_OBJECTS);
    }

    public List getAllObjectsByTemplateId(Integer templateId)
    {
	return persist.readList(TOObject.class, DAOConsts.SELECT_OBJECTS_BY_TEMPLATE_ID, templateId);
    }

    public TOObject getObject(Integer id)
    {
	return persist.read(TOObject.class, DAOConsts.SELECT_OBJECT_BY_ID, id);
    }

    public TOObject createNewObject(Integer templateId)
    {
	TOObject newobj = new TOObject();
	newobj.setObjectCreatedAt(new Date());
	newobj.setObjectUpdatedAt(new Date());
	newobj.setObjectId(0);
	newobj.setObjectParentId(0);
	newobj.setObjectTemplateId(templateId);
	int added = 0;
	PreparedStatement st = null;
	try
	{
	    //persist.insert(newobj);
	    st = conn.prepareStatement("insert into object values (?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
	    st.setInt(1, 0);
	    st.setInt(2, 0);
	    st.setInt(3, templateId);
	    st.setDate(4, new java.sql.Date(newobj.getObjectCreatedAt().getTime()));
	    st.setDate(5, new java.sql.Date(newobj.getObjectUpdatedAt().getTime()));
	    st.execute();
	    ResultSet rs = st.getGeneratedKeys();
	    if (rs.last())
	    {
		added = rs.getInt(1);
	    }
	} catch (SQLException ex)
	{
	    Logger.getLogger(TOObjectsManager.class.getName()).log(Level.SEVERE, null, ex);
	} finally
	{
	    try
	    {
		st.close();
	    } catch (SQLException ex)
	    {
		Logger.getLogger(TOObjectsManager.class.getName()).log(Level.SEVERE, null, ex);
	    }
	}

	//createDefaultPropsForObject(templateId, added);
	newobj.setObjectId(added);
	return newobj;
    }

    public void createDefaultPropsForObject(Integer templateId, Integer oid)
    {
	persist.executeUpdate(DAOConsts.CREATE_PROPS_FOR_OBJECT, new Object[]
		{
		    templateId, oid
		});
    }

    public TOObjectProperty getObjectProperty(Integer oid, Integer pid)
    {
	return persist.read(TOObjectProperty.class,
		DAOConsts.SELECT_OBJECT_PROP_BY_OBJECT_ID_AND_PROP_ID, new Object[]
		{
		    oid, pid
		});
    }

    public Object getPropertyValue(Integer oid, Integer pid)
    {
	TOObjectProperty objprop = getObjectProperty(oid, pid);
	TOProperty prop = EntityCache.getInstance().getPropertyFromCache(objprop.getPropertyId());
	if (prop == null)
	{
	    System.out.println("property not found in cache, loading");
	    prop = persist.read(TOProperty.class, DAOConsts.SELECT_PROPERTY_BY_ID, objprop.getPropertyId());
	    EntityCache.getInstance().addPropertyToCache(objprop.getPropertyId(), prop);
	}
	Object ret = new Object();
	switch (prop.getPropTypeId())
	{
	    case 1:
	    {
		ret = objprop.getStringVal();
	    }
	    break;
	    case 2:
	    {
		ret = objprop.getIntVal();
	    }
	    break;
	    case 3:
	    {
		ret = objprop.getFloatVal();
	    }
	    break;
	    case 4:
	    {
		ret = objprop.getTextVal();
	    }
	    break;
	}
	return ret;
    }

    public void createNewPropertyWithValue(Integer oid, Integer propid, Object value, Integer type)
    {
	TOObjectProperty newProp = new TOObjectProperty();
	newProp.setObjectId(oid);
	newProp.setPropertyId(propid);
	switch (type)
	{
	    case TOPropertyType.TYPE_STR:
	    {
		newProp.setStringVal(String.valueOf(value));
	    }
	    break;
	    case TOPropertyType.TYPE_INT:
	    {
		newProp.setIntVal(Integer.valueOf(String.valueOf(value)));
	    }
	    break;
	    case TOPropertyType.TYPE_FLOAT:
	    {
		newProp.setFloatVal(Float.valueOf(String.valueOf(value)));
	    }
	    break;
	    case TOPropertyType.TYPE_TEXT:
	    {
		newProp.setStringVal(String.valueOf(value));
	    }
	    break;
	    case TOPropertyType.TYPE_DATE:
	    {
		newProp.setDateVal((Date) value);
	    }
	    break;
	    case TOPropertyType.TYPE_LIST:
	    {
		newProp.setListVal(Integer.valueOf(String.valueOf(value)));
	    }
	    break;
	}
	persist.insert(newProp);
    }

    //ставит значение в object_props нужному объекту
    public void setPropertyValue(Integer oid, Integer propid, Object value)
    {
	TOObjectProperty property = getObjectProperty(oid, propid);
	TOProperty prop = EntityCache.getInstance().getPropertyFromCache(property.getPropertyId());
	if (prop == null)
	{
	    prop = persist.read(TOProperty.class, DAOConsts.SELECT_PROPERTY_BY_ID, property.getPropertyId());
	    EntityCache.getInstance().addPropertyToCache(property.getPropertyId(), prop);
	}

	switch (prop.getPropTypeId())
	{
	    case TOPropertyType.TYPE_STR:
	    {
		property.setStringVal(String.valueOf(value));
	    }
	    break;
	    case TOPropertyType.TYPE_INT:
	    {
		property.setIntVal(Integer.valueOf(String.valueOf(value)));
	    }
	    break;
	    case TOPropertyType.TYPE_FLOAT:
	    {
		property.setFloatVal(Float.valueOf(String.valueOf(value)));
	    }
	    break;
	    case TOPropertyType.TYPE_TEXT:
	    {
		property.setStringVal(String.valueOf(value));
	    }
	    break;
	    case TOPropertyType.TYPE_DATE:
	    {
		property.setDateVal((Date) value);
	    }
	    break;
	    case TOPropertyType.TYPE_LIST:
	    {
		property.setListVal(Integer.valueOf(String.valueOf(value)));
	    }
	    break;
	}
	persist.update(property);
    }

    public void setPropertyValue(Integer oid, Integer propid, Object value, Integer type)
    {
	TOObjectProperty property = getObjectProperty(oid, propid);
	switch (type)
	{
	    case TOPropertyType.TYPE_STR:
	    {
		property.setStringVal(String.valueOf(value));
	    }
	    break;
	    case TOPropertyType.TYPE_INT:
	    {
		property.setIntVal(Integer.valueOf(String.valueOf(value)));
	    }
	    break;
	    case TOPropertyType.TYPE_FLOAT:
	    {
		property.setFloatVal(Float.valueOf(String.valueOf(value)));
	    }
	    break;
	    case TOPropertyType.TYPE_TEXT:
	    {
		property.setStringVal(String.valueOf(value));
	    }
	    break;
	    case TOPropertyType.TYPE_DATE:
	    {
		property.setDateVal((Date) value);
	    }
	    break;
	    case TOPropertyType.TYPE_LIST:
	    {
		property.setListVal(Integer.valueOf(String.valueOf(value)));
	    }
	    break;
	}
	persist.update(property);
    }

    public Integer getObjectsCountByTemplateId(Integer templateId)
    {
	try
	{
	    PreparedStatement st = conn.prepareStatement(DAOConsts.SELECT_OBJECTS_COUNT_BY_TEMPLATE_ID);
	    st.setInt(1, templateId);
	    st.execute();
	    ResultSet rs = st.getResultSet();
	    if (rs.last())
	    {
		return rs.getInt(1);
	    }
	} catch (SQLException ex)
	{
	    Logger.getLogger(TOObjectsManager.class.getName()).log(Level.SEVERE, null, ex);
	}
	return 0;
    }

    public void removeObjectWithProps(Integer objId)
    {
	TOPropertiesManager propMngr = new TOPropertiesManager(conn);
	propMngr.removeObjPropertiesFromObject(objId);
	PreparedStatement st = null;
	try
	{
	    st = conn.prepareStatement(DAOConsts.REMOVE_OBJECT_BY_ID);
	    st.setInt(1, objId);
	    st.execute();
	} catch (SQLException ex)
	{
	    Logger.getLogger(TOObjectsManager.class.getName()).log(Level.SEVERE, null, ex);
	} finally
	{
	    try
	    {
		st.close();
	    } catch (SQLException ex)
	    {
		Logger.getLogger(TOObjectsManager.class.getName()).log(Level.SEVERE, null, ex);
	    }
	}
    }

    public void removeObjectsByTemplate(Integer templateId)
    {
	PreparedStatement st = null;
	try
	{
	    st = conn.prepareStatement(DAOConsts.REMOVE_OBJECT_BY_TEMPLATE_ID);
	    st.setInt(1, templateId);
	    st.execute();
	} catch (SQLException ex)
	{
	    Logger.getLogger(TOObjectsManager.class.getName()).log(Level.SEVERE, null, ex);
	} finally
	{
	    try
	    {
		st.close();
	    } catch (SQLException ex)
	    {
		Logger.getLogger(TOObjectsManager.class.getName()).log(Level.SEVERE, null, ex);
	    }
	}
    }

    public void removeAllObjects()
    {
	TOPropertiesManager propMngr = new TOPropertiesManager(conn);
	propMngr.removeAllObjectProperties();
	PreparedStatement st = null;
	try
	{
	    st = conn.prepareStatement(DAOConsts.REMOVE_ALL_OBJECTS);
	    st.execute();
	} catch (SQLException ex)
	{
	    Logger.getLogger(TOObjectsManager.class.getName()).log(Level.SEVERE, null, ex);
	} finally
	{
	    try
	    {
		st.close();
	    } catch (SQLException ex)
	    {
		Logger.getLogger(TOObjectsManager.class.getName()).log(Level.SEVERE, null, ex);
	    }
	}
    }
}
