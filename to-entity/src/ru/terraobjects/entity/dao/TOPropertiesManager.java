package ru.terraobjects.entity.dao;

/**
 *
 * @author terranz
 */
import java.util.List;
import java.sql.Connection;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.sf.persist.*;
import ru.terraobjects.entity.TOBulkObjectProperty;
import ru.terraobjects.entity.TOObjectProperty;
import ru.terraobjects.entity.TOObjectTemplateProperty;
import ru.terraobjects.entity.TOProperty;
import ru.terraobjects.entity.TOPropertyType;

public class TOPropertiesManager
{
    private Connection conn = null;
    private Persist persist = null;

    public TOPropertiesManager(Connection conn)
    {
	this.conn = conn;
	persist = new Persist(conn);
	persist.setUpdateAutoGeneratedKeys(true);
    }

    public List<TOPropertyType> getPropertyTypes()
    {
	return persist.readList(TOPropertyType.class, DAOConsts.SELECT_ALL_PROP_TYPES);
    }

    public List<TOProperty> getProperties()
    {
	return persist.readList(TOProperty.class, DAOConsts.SELECT_ALL_PROPERTIES);
    }

    public TOProperty getProperty(Integer propId)
    {
	return persist.read(TOProperty.class, DAOConsts.SELECT_PROPERTY_BY_ID, propId);
    }

    public List<TOObjectProperty> getObjPropsForObjId(Integer oid)
    {
	return persist.readList(TOObjectProperty.class, DAOConsts.SELECT_OBJECT_PROPS_BY_OBJECT_ID, oid);
    }

    public TOPropertyType getPropertyType(Integer propId)
    {
	TOPropertyType res = EntityCache.getInstance().getPropertyTypeFromCache(propId);
	if (res == null)
	{
	    res = persist.read(TOPropertyType.class, DAOConsts.SELECT_PROP_TYPE_BY_ID, propId);
	    EntityCache.getInstance().addPropertyTypeToCache(propId, res);
	}
	return res;
    }

    public TOObjectProperty getObjectProperty(Integer oId, Integer propId)
    {
	TOObjectProperty res = persist.read(TOObjectProperty.class, DAOConsts.SELECT_OBJECT_PROP_BY_OBJECT_ID_AND_PROP_ID, oId, propId);
	return res;
    }

    public void removeObjectPropertyByPropId(Integer propId)
    {
	PreparedStatement st = null;
	try
	{
	    st = conn.prepareStatement(DAOConsts.REMOVE_OBJECT_PROP_BY_PROP_ID);
	    st.setInt(1, propId);
	    st.execute();
	} catch (SQLException ex)
	{
	    Logger.getLogger(TOObjectsManager.class.getName()).log(Level.SEVERE, null, ex);
	} finally
	{
	    try
	    {
		st.close();
	    } catch (SQLException ex)
	    {
		Logger.getLogger(TOPropertiesManager.class.getName()).log(Level.SEVERE, null, ex);
	    }
	}
    }

    public void removeObjPropertiesFromObject(Integer oId)
    {
	PreparedStatement st = null;
	try
	{
	    st = conn.prepareStatement(DAOConsts.REMOVE_OBJECT_PROP_BY_OBJECT_ID);
	    st.setInt(1, oId);
	    st.execute();
	} catch (SQLException ex)
	{
	    Logger.getLogger(TOObjectsManager.class.getName()).log(Level.SEVERE, null, ex);
	} finally
	{
	    try
	    {
		st.close();
	    } catch (SQLException ex)
	    {
		Logger.getLogger(TOPropertiesManager.class.getName()).log(Level.SEVERE, null, ex);
	    }
	}
	//todo implement removing list property type
    }

    public void removeObjectProperty(Integer oId, Integer propId)
    {
	PreparedStatement st = null;
	try
	{
	    st = conn.prepareStatement(DAOConsts.REMOVE_OBJECT_PROP_BY_OBJECT_ID_AND_PROP_ID);
	    st.setInt(1, oId);
	    st.setInt(2, propId);
	    st.execute();
	} catch (SQLException ex)
	{
	    Logger.getLogger(TOObjectsManager.class.getName()).log(Level.SEVERE, null, ex);
	} finally
	{
	    try
	    {
		st.close();
	    } catch (SQLException ex)
	    {
		Logger.getLogger(TOPropertiesManager.class.getName()).log(Level.SEVERE, null, ex);
	    }
	}
    }

    public void removeAllObjectProperties()
    {
	PreparedStatement st = null;
	try
	{
	    st = conn.prepareStatement(DAOConsts.REMOVE_ALL_OBJECT_PROPS);
	    st.execute();
	} catch (SQLException ex)
	{
	    Logger.getLogger(TOObjectsManager.class.getName()).log(Level.SEVERE, null, ex);
	} finally
	{
	    try
	    {
		st.close();
	    } catch (SQLException ex)
	    {
		Logger.getLogger(TOPropertiesManager.class.getName()).log(Level.SEVERE, null, ex);
	    }
	}
	//todo implement removing list property type
    }

    public List<Integer> getObjIdsListByPropertyId(Integer listPropId)
    {
	return persist.readList(Integer.class, DAOConsts.SELECT_OBJPROP_LIST_BY_LISTPROP_ID, listPropId);
    }

    public void createDefaultPropsForObject(Integer templateId, Integer oid, Boolean storedProc)
    {
	if (storedProc)
	{
	    PreparedStatement st = null;
	    try
	    {
		st = conn.prepareStatement(DAOConsts.CREATE_PROPS_FOR_OBJECT);
		st.setInt(1, templateId);
		st.setInt(2, oid);
		st.execute();
	    } catch (SQLException ex)
	    {
		Logger.getLogger(TOPropertiesManager.class.getName()).log(Level.SEVERE, null, ex);
	    } finally
	    {
		try
		{
		    st.close();
		} catch (SQLException ex)
		{
		    Logger.getLogger(TOPropertiesManager.class.getName()).log(Level.SEVERE, null, ex);
		}
	    }
	} else
	{
	    TOTemplateManager tManager = new TOTemplateManager(conn);
	    List<TOObjectTemplateProperty> props = tManager.getObjectTemplatePropsByTemplate(templateId);
	    for (TOObjectTemplateProperty prop : props)
	    {
		createNewObjectPropertyWithValue(oid, prop.getId(), "", TOPropertyType.TYPE_STR);
	    }
	}
    }

    public Object getPropertyValue(Integer oid, Integer pid)
    {
	TOObjectProperty objprop = getObjectProperty(oid, pid);
	if (objprop != null)
	{
	    Object ret = null;
	    switch (objprop.getTypeId())
	    {
		case TOPropertyType.TYPE_STR:
		{
		    ret = objprop.getStringVal();
		}
		break;
		case TOPropertyType.TYPE_INT:
		{
		    ret = objprop.getIntVal();
		}
		break;
		case TOPropertyType.TYPE_FLOAT:
		{
		    ret = objprop.getFloatVal();
		}
		break;
		case TOPropertyType.TYPE_TEXT:
		{
		    ret = objprop.getTextVal();
		}
		break;
		case TOPropertyType.TYPE_DATE:
		{
		    ret = objprop.getDateVal();
		}
		break;
		case TOPropertyType.TYPE_LIST:
		{
		    ret = getObjIdsListByPropertyId(objprop.getListVal());
		}
		break;
	    }
	    return ret;
	}
	throw new RuntimeException("Object " + oid + " doesn't have property " + pid);
    }

    public void createNewObjectPropertyWithValue(Integer oid, Integer propid, Object value, Integer type)
    {
	TOObjectProperty newProp = new TOObjectProperty();
	newProp.setObjectId(oid);
	newProp.setPropertyId(propid);
	newProp.setTypeId(type);
	try
	{
	    switch (type)
	    {
		case TOPropertyType.TYPE_STR:
		{
		    newProp.setStringVal(String.valueOf(value));
		}
		break;
		case TOPropertyType.TYPE_INT:
		{
		    newProp.setIntVal(Integer.valueOf(String.valueOf(value)));
		}
		break;
		case TOPropertyType.TYPE_FLOAT:
		{
		    newProp.setFloatVal(Float.valueOf(String.valueOf(value)));
		}
		break;
		case TOPropertyType.TYPE_TEXT:
		{
		    newProp.setStringVal(String.valueOf(value));
		}
		break;
		case TOPropertyType.TYPE_DATE:
		{
		    newProp.setDateVal((Date) value);
		}
		break;
		case TOPropertyType.TYPE_LIST:
		{
		    newProp.setListVal(Integer.valueOf(String.valueOf(value)));
		}
		break;
	    }
	} catch (NumberFormatException e)
	{
	    System.out.println("NumberFormatException while translating " + propid + " with value " + value + " for object " + oid);
	}
	persist.insert(newProp);
    }

    //ставит значение в object_props нужному объекту
    public void setPropertyValue(Integer oid, Integer propid, Object value, Integer type)
    {
	TOObjectProperty property = getObjectProperty(oid, propid);
	if (property == null)
	{
	    //throw new RuntimeException("Can't set property: " + propid);
	    createNewObjectPropertyWithValue(oid, propid, value, type);
	} else
	{
	    try
	    {
		property.setTypeId(type);
		switch (type)
		{
		    case TOPropertyType.TYPE_STR:
		    {
			property.setStringVal(String.valueOf(value));
		    }
		    break;
		    case TOPropertyType.TYPE_INT:
		    {
			property.setIntVal(Integer.valueOf(String.valueOf(value)));
		    }
		    break;
		    case TOPropertyType.TYPE_FLOAT:
		    {
			property.setFloatVal(Float.valueOf(String.valueOf(value)));
		    }
		    break;
		    case TOPropertyType.TYPE_TEXT:
		    {
			property.setStringVal(String.valueOf(value));
		    }
		    break;
		    case TOPropertyType.TYPE_DATE:
		    {
			property.setDateVal((Date) value);
		    }
		    break;
		    case TOPropertyType.TYPE_LIST:
		    {
			property.setListVal(Integer.valueOf(String.valueOf(value)));
		    }
		    break;
		}
	    } catch (NumberFormatException e)
	    {
		System.out.println("NumberFormatException while translating " + propid + " with value " + value + " for object " + oid);
	    }
	    persist.update(property);
	}
    }

    public TOProperty createNewProperty(Integer type, String defVal, String name, Integer propId)
    {
	TOProperty newProp = new TOProperty();
	newProp.setTypeId(type);
	newProp.setDefValue(defVal);
	newProp.setId(0);
	newProp.setName(name);
	int added = 0;
	PreparedStatement st = null;
	try
	{
	    //persist.insert(newobj);
	    st = conn.prepareStatement("insert into property values (?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
	    st.setInt(1, propId != null ? propId : 0);
	    st.setInt(2, type);
	    st.setString(3, defVal);
	    st.setString(4, name);
	    st.execute();
	    ResultSet rs = st.getGeneratedKeys();
	    if (rs.last())
	    {
		added = rs.getInt(1);
	    }
	} catch (SQLException ex)
	{
	    Logger.getLogger(TOPropertiesManager.class.getName()).log(Level.SEVERE, null, ex);
	} finally
	{
	    try
	    {
		st.close();
	    } catch (SQLException ex)
	    {
		Logger.getLogger(TOPropertiesManager.class.getName()).log(Level.SEVERE, null, ex);
	    }
	}

	//createDefaultPropsForObject(templateId, added);
	newProp.setId(added);
	return newProp;
    }

    public void bulkCreateObjectProps(List<TOBulkObjectProperty> props)
    {
	Statement st = null;
	try
	{
	    String sql = "insert into object_props(object_id,prop_id,prop_type,strval,intval,floatval,textval,dateval,listval) values ";
	    boolean first = true;
	    for (TOBulkObjectProperty prop : props)
	    {
		if (!first)
		{
		    sql += ",";
		} else
		{
		    first = false;
		}
		sql += "(" + prop.getObjectId() + "," + prop.getPropId() + "," + prop.getType() + ",";
		int pos = 3 + prop.getType();
		for (int i = 4; i < 10; i++)
		{
		    if (i != 4)
		    {
			sql += ",";
		    }
		    if (pos == i && prop.getValue() != null)
		    {
			sql += "'" + prop.getValue().toString() + "'";
		    } else
		    {
			sql += "null";
		    }
		}
		sql += ")";
	    }
	    st = conn.createStatement();
	    st.execute(sql);
	} catch (SQLException ex)
	{
	    Logger.getLogger(TOPropertiesManager.class.getName()).log(Level.SEVERE, null, ex);
	} finally
	{
	    try
	    {
		if (st != null)
		{
		    st.close();
		}
	    } catch (SQLException ex)
	    {
		Logger.getLogger(TOPropertiesManager.class.getName()).log(Level.SEVERE, null, ex);
	    }
	}
    }
}
